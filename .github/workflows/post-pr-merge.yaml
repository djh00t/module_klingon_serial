name: Klingon Serial Post-PR Merge CI

# Controls when the action will run. 
on:
  pull_request:
    types: [closed]
    branches: [main]
    paths:
      - '.github/workflows/post-pr-merge.yaml'
      - 'klingon_serial/**'
      - 'tests/**'
      - 'VERSION'
      - 'Makefile'
      - 'setup.py'
      - 'requirements.txt'
  workflow_dispatch:
concurrency: 
  # The workflow will run only one at a time per branch
  group: ${{ github.workflow }}-${{ github.ref }}
  # The workflow will cancel if a run is in progress
  cancel-in-progress: true

jobs:
  post-pr-merge:
    # Permissions that the job needs
    permissions:
      id-token: write
      packages: write
      contents: read
      attestations: write
    
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Only run the job if the PR was merged
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == true
    
    steps:
      # Check out the repository
      - uses: actions/checkout@v3

      # Set up Python 3.x
      - name: Set up Python 3.x
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'

      # Set up Poetry
      - name: Set up Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.5.1
          virtualenvs-create: true
          virtualenvs-in-project: true

      # Install dependencies
      - name: Install dependencies
        run: |
          poetry install

      # Build and test the package
      - name: Build and test
        run: |
          poetry run make sdist
          poetry run make wheel
          poetry run make test

      # Check the current version and increment
      - name: Check current version and increment
        id: check_version
        run: |
          current_version=$(poetry version -s)
          echo "Current version is $current_version"
          IFS='.' read -ra VERSION_PARTS <<< "$current_version"
          VERSION_PARTS[-1]=$((VERSION_PARTS[-1]+1))
          new_version="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.${VERSION_PARTS[2]}"
          echo "New version will be $new_version"
          echo "new_version=$new_version" >> $GITHUB_ENV
          poetry version $new_version

      # Attest the build provenance
      - name: Attest Build Provenance
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: |
            'dist/*.whl'
            'dist/*.tar.gz'

      # Push the package to TestPyPI
      - name: Push to TestPyPI
        if: github.ref == 'refs/heads/main' # This ensures that PyPI upload only happens on main branch merges.  
        run: |
            make upload-test TEST_PYPI_USER_AGENT=${{ secrets.TEST_PYPI_USER_AGENT }} VERSION=${{ env.new_version }}

      # Pull the package from TestPyPI and run tests
      - name: Push to PyPI
        if: github.ref == 'refs/heads/main' # This ensures that PyPI upload only happens on main branch merges.
        run: |
          make upload PYPI_USER_AGENT=${{ secrets.PYPI_USER_AGENT }}
