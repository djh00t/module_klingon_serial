name: OpenFaaS Pre-Checks & Create PR

on:
  push:
    branches:
      - '*'
    paths:
      - 'openfaas/**'
      - '.github/workflows/openfaas-pre-docker-build-pr.yaml'
      - '.github/workflows/openfaas-docker-build.yaml'
  workflow_dispatch:
concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false
  
jobs:
  prepare-version-pr:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Set up Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.5.1
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: |
        poetry install

    - name: Calculate new release number
      id: versioning
      run: |
        # Import openfaas/build.py
        import sys
        import os
        sys.path.append(os.path.join(os.environ['GITHUB_WORKSPACE'], 'openfaas'))
        from build import fetch_latest_tag, increment_version
        image_name = 'djh00t/klingon-serial'
        latest_tag = fetch_latest_tag(image_name)
        new_version = increment_version(latest_tag, 'patch')  # Assuming we're doing a patch release
        with open(os.getenv('GITHUB_ENV'), 'a') as f:
           f.write(f"new_version={new_version}\n")
      shell: python

    - name: Create or update PR with new release number
      uses: actions/github-script@v6
      with:
        script: |
          const newVersion = process.env.new_version;
          const branchName = `release-${newVersion}`;
          const title = `Release ${newVersion}`;
          let body = '## Changelog\n';
          const base = 'main';
          const labels = ['pre-release'];


          // Check if the branch already exists
          let branchExists = false;
          try {
            await github.rest.repos.getBranch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              branch: branchName
            });
            branchExists = true;
          } catch (error) {
            if (error.status !== 404) {
              throw error;
            }
          }

          // Create the branch if it does not exist
          if (!branchExists) {
            const refResponse = await github.rest.git.createRef({
              ...context.repo,
              ref: `refs/heads/${branchName}`,
              sha: context.sha
            });
            console.log(`Created ref ${refResponse.data.ref}`);
          }

          // Fetch commits for the pull request
          const compareResponse = await github.rest.repos.compareCommits({
            owner: context.repo.owner,
            repo: context.repo.repo,
            base: base,
            head: branchName
          });
          const commits = compareResponse.data.commits;
          body += commits.map(commit => `- ${commit.commit.message} (${commit.sha})`).join('\n') + '\n';


          const pullRequest = await github.rest.pulls.create({
            ...context.repo,
            title,
            body,
            head: branchName,
            base,
            labels,
            draft: false
          });
          console.log(`Created pull request #${pullRequest.data.number}`);
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
